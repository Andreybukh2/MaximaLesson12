Создать программу для вывода в консоль списка времен года по фильтру из коллекции.

1.0.0 Базовая реализация (шаблон)

1.1.0 Создать класс Months. (Поля, конструктор, getters and setters, метод переопределения toString;
      * Помимо примитивных типов данных и строк, поле Season имеет тип данных Seasons Enam-класса;

1.2.0 Создать класс Main. (Метод Main);

1.2.2 Создать ссылку с Дженериком и положить туда наш лист getFromBase;
        List<Months> monthsLink = getFromBase();
        monthsLink - произвольное название, которое призвано визуально разделить и показать ссылку;

1.2.3 Создать лист для вывода результатов цикла
        List<Months> showResult = new ArrayList<>();
          for (Months monthsFor : monthsLink){
            if (monthsFor.getSeasons().equals(Seasons.AUTUMN)){
                showResult.add(monthsFor);
                  }
               }
               showResult.forEach(System.out::println);
            }
        * showResult - Произвольное название для удобной визуализации;
        * List<Months> - лист параметризованный Месяцами по которому пройдем циклом с условием;
        * new ArrayList<>(); - одна из реализаций интерфейса List в которую поместим наши данные, new - правила создания нового объекта;
        * for (Months monthsFor : monthsLink) - цикл который пройдет по элементам Месяцев в ссылке на БД которая наполнена в ручную или из вне;
          monthsFor - произвольное название для удобства визуализации что это название цикла;
        * if (monthsFor.getSeasons().equals(Seasons.AUTUMN)){
                          showResult.add(monthsFor); - если цикл под названием monthsFor получит через getter - getSeasons() для сравнения методом
                          equals ( какой то сезон из Enam-класса Seasons.AUTUMN)), то showResult для каждого элемента forEach
                          выведет это на консоль через метод (System.out::println);

1.2.1 Создать метод наполнения БД по шаблону конструктора;
        private static List<Months> getFromBase(){
                return List.of(
                        new Months("Январь", 1, Seasons.WINTER),
                        new Months("Далее n-элементов)
                );
        * Статический метод не имеет доступа к полям объекта, и для вызова такого метода не нужно создавать экземпляр (объект) класса, в котором он объявлен;
        * List - используем интерфейс для дальнейшей унификации возможностей, потому что List содержит множество реализаций в случае необходимости.
        * <Months> - дженерик обозначает что List параметризован месяцами;
        * getFromBase - произвольное название. Поскольку наполняемая коллекция имеет право назваться некой Базой;
        * return List.of( - означает что метод возвращаемый и вернет нам как раз сформированную базу);

1.3.1 Создать Enam-класс Seasons. (Содержит перечисления с ограниченным кругом значений которые будут применены в конструкторе и при фильтрации коллекции);
      * В данном классе содержатся перечисления. В данном случае времен года.
